name: publish

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  fixture_derive:
    runs-on: ubuntu-latest
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get releasing version
        working-directory: fixture_derive
        run: echo NEXT_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_ENV

      - name: Check published version
        run: echo PREV_VERSION=$(cargo search fixture_derive --limit 1 | sed -nE 's/^[^"]*"//; s/".*//1p' -) >> $GITHUB_ENV

      - name: Cargo login
        if: env.NEXT_VERSION != env.PREV_VERSION
        run: cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Cargo package
        if: env.NEXT_VERSION != env.PREV_VERSION
        working-directory: fixture_derive
        run: |
          echo "Releasing version: $NEXT_VERSION"
          echo "Published version: $PREV_VERSION"
          echo "Cargo Packaging..."
          cargo package

      - name: Publish fixture_derive
        if: env.NEXT_VERSION != env.PREV_VERSION
        working-directory: fixture_derive
        run: |
          echo "Cargo Publishing..."
          cargo publish --no-verify -p fixture_derive
          echo "New version $NEXT_VERSION has been published"

  fixture_rs:
    needs: fixture_derive
    runs-on: ubuntu-latest
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get releasing version
        working-directory: fixture_rs
        run: echo NEXT_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_ENV

      - name: Check published version
        run: echo PREV_VERSION=$(cargo search fixture_rs --limit 1 | sed -nE 's/^[^"]*"//; s/".*//1p' -) >> $GITHUB_ENV

      - name: Cargo login
        if: env.NEXT_VERSION != env.PREV_VERSION
        run: cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Cargo package
        if: env.NEXT_VERSION != env.PREV_VERSION
        working-directory: fixture_rs
        run: |
          echo "Releasing version: $NEXT_VERSION"
          echo "Published version: $PREV_VERSION"
          echo "Cargo Packaging..."
          cargo package

      - name: Publish fixture_rs
        if: env.NEXT_VERSION != env.PREV_VERSION
        working-directory: fixture_rs
        run: |
          echo "Cargo Publishing..."
          cargo publish --no-verify -p fixture_rs
          echo "New version $NEXT_VERSION has been published"
